{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js","alarm.mp3"],"names":["msToTime","duration","seconds","parseInt","minutes","App","useState","bar","setBar","setDuration","workDuration","setWorkDuration","restDuration","setRestDuration","timeLeft","setTimeLeft","status","setStatus","settingsStatus","setSettingsStatus","typeStatus","setTypeStatus","total","setTotal","useEffect","interval","setInterval","clearInterval","className","aria-label","defaultValue","min","max","style","width","value","step","onChange","disabled","autoFocus","onClick","icon","faPause","faPlay","faRedo","height","color","fontSize","autoPlay","src","alarm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.3c537d9b.chunk.js","sourcesContent":["function msToTime(duration) {\n    let seconds = parseInt((duration / 1000) % 60)\n        , minutes = parseInt((duration / (1000 * 60)) % 60)\n\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\n\n    return minutes + \":\" + seconds;\n}\n\nexport default msToTime;","import React, { useState, useEffect } from 'react';\nimport alarm from './alarm.mp3';\nimport msToTime from './helpers';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faRedo } from '@fortawesome/free-solid-svg-icons';\nimport 'rc-input-number/assets/index.css';\nimport InputNumber from 'rc-input-number';\n\nimport './App.scss';\n\n\nconst App = () => {\n\n\tconst [bar, setBar] = useState(0);\n\tconst [duration, setDuration] = useState(1500);\n\tconst [workDuration, setWorkDuration] = useState(1500);\n\tconst [restDuration, setRestDuration] = useState(300);\n\tconst [timeLeft, setTimeLeft] = useState(duration);\n\tconst [status, setStatus] = useState(false);\n\tconst [settingsStatus, setSettingsStatus] = useState(false);\n\tconst [typeStatus, setTypeStatus] = useState('work');\n\tconst [total, setTotal] = useState(0);\n\n\tconst PlayAlarm = () => (\n\t\t<audio autoPlay src={alarm} />\n\t)\n\n\tconst handleWorkDuration = value => {\n\t\tsetTimeLeft(value * 60);\n\t\tsetWorkDuration(value * 60);\n\t\tsetDuration(value * 60);\n\t}\n\n\tconst handleRestDuration = value => {\n\t\tsetRestDuration(value * 60);\n\t}\n\n\tconst startTimer = () => {\n\t\tsetStatus(!status);\n\t\tsetSettingsStatus(true);\n\t}\n\n\tconst resetTimer = () => {\n\t\tsetStatus(false);\n\t\tsetBar(0);\n\t\tsetTypeStatus('work');\n\t\tsetDuration(1500);\n\t\tsetTimeLeft(workDuration);\n\t\tsetTotal(0);\n\t\tsetSettingsStatus(false)\n\t}\n\n\tuseEffect(() => {\n\n\t\tlet interval = null;\n\t\tif (status) {\n\n\t\t\tif (bar > 100) {\n\t\t\t\tsetBar(0);\n\t\t\t\tif (typeStatus === 'work') {\n\t\t\t\t\tsetTimeLeft(restDuration);\n\t\t\t\t\tsetTypeStatus('rest');\n\t\t\t\t\tsetDuration(restDuration);\n\t\t\t\t\tsetTotal(total + 1);\n\t\t\t\t}\n\t\t\t\tif (typeStatus === 'rest') {\n\t\t\t\t\tsetTimeLeft(workDuration);\n\t\t\t\t\tsetTypeStatus('work');\n\t\t\t\t\tsetDuration(workDuration);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tsetBar(bar + (100 / duration));\n\t\t\t\tsetTimeLeft(timeLeft - 1);\n\t\t\t}, 1000);\n\n\t\t} else {\n\t\t\tclearInterval(interval);\n\t\t}\n\t\treturn () => { clearInterval(interval) };\n\n\t}, [status, bar, timeLeft, duration, restDuration, total, typeStatus, workDuration]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"timer-settings\">\n\t\t\t\t<div className=\"work-time\">\n\t\t\t\t\t<span>Work Time: </span>\n\t\t\t\t\t<InputNumber\n\t\t\t\t\t\taria-label=\"Work Time\"\n\t\t\t\t\t\tdefaultValue={5}\n\t\t\t\t\t\tmin={5}\n\t\t\t\t\t\tmax={25}\n\t\t\t\t\t\tstyle={{ width: 100 }}\n\t\t\t\t\t\tvalue={workDuration / 60}\n\t\t\t\t\t\tstep={5}\n\t\t\t\t\t\tonChange={handleWorkDuration}\n\t\t\t\t\t\tdisabled={settingsStatus === true}\n\t\t\t\t\t\tautoFocus={true}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"rest-time\">\n\t\t\t\t\t<span>Rest Time: </span>\n\t\t\t\t\t<InputNumber\n\t\t\t\t\t\taria-label=\"Rest Time\"\n\t\t\t\t\t\tdefaultValue={1}\n\t\t\t\t\t\tmin={1}\n\t\t\t\t\t\tmax={15}\n\t\t\t\t\t\tstyle={{ width: 100 }}\n\t\t\t\t\t\tvalue={restDuration / 60}\n\t\t\t\t\t\tstep={1}\n\t\t\t\t\t\tonChange={handleRestDuration}\n\t\t\t\t\t\tdisabled={settingsStatus === true}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className=\"timer-wrap\">\n\t\t\t\t<div className=\"btn btn-animate start-timer\" onClick={startTimer}><FontAwesomeIcon icon={status ? faPause : faPlay} /></div>\n\t\t\t\t<div className=\"btn btn-animate reset-timer\" onClick={resetTimer}><FontAwesomeIcon icon={faRedo} /></div>\n\n\t\t\t\t<div className=\"timer-circle\">\n\t\t\t\t\t<div className={`timer-filler ${typeStatus}`} style={{ height: `${bar}%`, color: '#fff', fontSize: '40px' }}>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"timer\"><h1>{msToTime(timeLeft * 1000)}</h1></div>\n\t\t\t\t\t<div className=\"total\"><h3>{total}</h3></div>\n\n\t\t\t\t\t{(bar === 100) && <PlayAlarm />}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alarm.d71fb1e6.mp3\";"],"sourceRoot":""}